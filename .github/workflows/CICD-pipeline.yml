name: Packer Continuous Integration

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

jobs:
  build-artifact:
    runs-on: ubuntu-latest
  
    steps:
      - uses: actions/checkout@v3

      # - name: save .env files
      #   env:
      #    ENV_VAR: ${{ secrets.ENV_VAR }}
      #   run: echo "$ENV_VAR" > .env

      - name: creating zip
        run: |
          sudo apt install zip -y
          pwd
          ls -al 
          zip -r webapp.zip . -x '*packer*' -x '*.git*'

      - uses: actions/upload-artifact@v4
        with: 
          name: webapp.zip
          path: ./webapp.zip
    

  build-packer-image:
    needs: build-artifact
    runs-on: ubuntu-latest
    outputs:
      image_id: ${{ steps.build.outputs.image_id }}
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/download-artifact@v4
        with:
          name: webapp.zip
          path: ./

      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Setup HashiCorp Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
            version: "latest"

      - name: Run `packer init`
        id: init
        run: 
          |
          cd packer/
          packer init .

      - name: Run `packer validate`
        id: validate
        env: 
            PACKER_CONFIG: ${{ secrets.PACKER_CONFIG }}
        run: |
            cd packer/
            echo "$PACKER_CONFIG" > ./values.pkrvars.hcl
            packer validate -var-file="values.pkrvars.hcl" .

      - name: Run `packer build`
        id: build
        run: |
            pwd 
            cd packer/
            pwd
            packer build -var-file="values.pkrvars.hcl" .
            ls -al
            cat manifest.json
            sudo apt install jq 
            image_id=$(jq -r '.builds[0].artifact_id' manifest.json)
            echo "Output [$image_id]"
            echo "image_id=$image_id ">> $GITHUB_OUTPUT
            ls -al
            pwd    
  
  start-deployment:
    needs: build-packer-image
    runs-on: ubuntu-latest
    env:
      packer_image_id: ${{ needs.build-packer-image.outputs.image_id }}
    steps:
      - uses: actions/checkout@v3

      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: "Fetching values from gcp console"
        id: fetch
        run: |
          echo packer image is $packer_image_id
          pwd
          ls -al
          vm_props=$(gcloud secrets versions access 1 --secret="vm_props")
          webapp_template_name=$(gcloud secrets versions access 1 --secret="webapp_template_name")
          startup_script=$(gcloud secrets versions access 1 --secret="startup_script")
          kms=$(gcloud secrets versions access 1 --secret="kms")
          chmod 755 run_deployment.sh
          ./run_deployment.sh $vm_props $packer_image_id $webapp_template_name "$startup_script" $kms
          ls -al
          pwd